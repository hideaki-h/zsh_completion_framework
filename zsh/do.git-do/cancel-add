#!/usr/bin/env zsh

#
# template of concrete functions
# UPDATE code appropriately for your do method
#

dir_name=$( cd $( dirname $0 ); pwd | sed 's/^.*\///' )
do_name=$( basename $0 )
work_name=${dir_name:3}
env_path=${ZSH_COMPLETION_KIT_BASE_DIR}/etc/${work_name}.env
[[ -f $env_path ]] && . $env_path

repo_name_candidate=$1

# output usage information for direct execution
#
function printUsage() {
	echo "Usage: $do_name [args]"
	func_sub_do_help
}

# concrete function to execute something for your do method
# ACTION: Update code
#
function func_sub_do() {
	# here code to be done in this do method
	repo_name=$1
	branch_name=$2
	file_path=$3
	# check file
	if [[ ! -e $file_path ]]; then
		echo "ERROR: file $file_path not found"
		exit 255
	fi
	
	# check git_repo.list
	l=$( cat $GIT_REPO_LIST | grep "^${repo_name}\t${branch_name}\t" | wc -l )
	if [[ $l -ne 1 ]]; then
		echo "ERROR: invalid repository"
		exit 255
	fi
	
	file_fqpath="$( cd $( dirname $file_path ); pwd )/$( basename $file_path )"
	repo_fqdir=$( cd $( cat $GIT_REPO_LIST | grep "^${repo_name}\t${branch_name}\t" | cut -f3 ); pwd )
	if [[ ! -d $repo_fqdir ]]; then
		echo "ERROR: repo dir $repo_dir not found"
		exit 255
	fi
	if [[ ! $file_fqpath =~ ^$repo_fqdir ]]; then
		echo "ERROR: target file belongs to local dir to repository/branch specified"
		exit 255
	fi
	relative_file_path=${file_fqpath:${#repo_fqdir}+1:${#file_fqpath}-${#repo_fqdir}}
	( cd $repo_fqdir; git reset $relative_file_path )
	
	exit 0
}

# template concrete function to return completion information(key and values) of argument for indirect execution(called from completion _XXX_do script/function)
# ACTION: Duplicate below several times of arguments, Revise function name of argX and Update code
#
function func_sub_return_completion_do_arg1() {
	# here return key/values for completion in this do method
	[[ $1 = "key" ]] && echo "repo name"
		echo $GIT_REPO_LIST
	sz_repo_names=( $( cat $GIT_REPO_LIST | grep -v '^#' | grep -v '^$' | cut -f1 ) )
	repo_names="$( IFS=' '; echo "${sz_repo_names[*]}" )"
	[[ $1 = "values" ]] && echo $repo_names
}
function func_sub_return_completion_do_arg2() {
	# here return key/values for completion in this do method
	[[ $1 = "key" ]] && echo "branch name"
		echo $GIT_REPO_LIST,$repo_name_candidate
	sz_branch_names=( $( cat $GIT_REPO_LIST | grep "^${repo_name_candidate}\t" | cut -f2 ) )
	branch_names="$( IFS=' '; echo "${sz_branch_names[*]}" )"
	[[ $1 = "values" ]] && echo $branch_names
}
function func_sub_return_completion_do_arg3() {
	# file_path
	# here return key/values for completion in this do method
}

# concrete function to output this method description for indirect execution(called from completion _XXX_do script/function)
# ACTION: Update code
#
function func_sub_do_desc() {
	# here output description for this do method
	echo "cancel to add file for next commit"
}

# concrete function to output arguments usage for indirect execution(called from parent XXX_do script/function)
# ACTION: Update code
#
function func_sub_do_help() {
	# here output arguments usage in this do method
	echo "    arg[1]: repo name"
	echo "    arg[2]: branch name"
	echo "    arg[3]: file path cancelled to add"
}


# example export functions list. all function included.
# ACTION: Uncomment and Delete undefined function appropriate in this do method
#
#export_functions='func_sub_do func_sub_do_desc func_sub_do_help func_sub_return_completion_do_arg1 func_sub_return_completion_do_arg2 func_sub_return_completion_do_arg3 func_sub_return_completion_do_arg4 func_sub_return_completion_do_arg5 func_sub_return_completion_do_arg6 func_sub_return_completion_do_arg7 func_sub_return_completion_do_arg8 func_sub_return_completion_do_arg9'

export_functions='func_sub_do func_sub_do_desc func_sub_do_help func_sub_return_completion_do_arg1 func_sub_return_completion_do_arg2 func_sub_return_completion_do_arg3'


# export functions listed in above export_functions variable
export -f $export_functions

# call super shellscript/function like inherited method of super class. And callback the function exported to do concrete action
. $( dirname $0 )/../.do/do.super $1 $2 $3 $4 $5 $6 $7 $8 $9

# unexport functions
unset $export_functions


