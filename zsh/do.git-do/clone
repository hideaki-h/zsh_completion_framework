#!/usr/bin/env zsh

dir_name=$( cd $( dirname $0 ); pwd | sed 's/^.*\///' )
do_name=$( basename $0 )
work_name=${dir_name:3}
env_path=${ZSH_COMPLETION_KIT_BASE_DIR}/etc/${work_name}.env
[[ -f $env_path ]] && . $env_path

repo_name_candidate=$1

function printUsage() {
	echo "Usage: $do_name [args]"
	func_sub_do_help
}

function func_sub_do() {
	# check arguments
	case $# in
		[14])
			;;
		*)
			printUsage
			exit 1
			;;
	esac
	
	# number of repo record
	l=$( grep "^$1\t" $GIT_REPO_LIST | wc -l )
	# get repo parameters in git_repo.list
	branch_name=$( grep "^$1\t" $GIT_REPO_LIST | cut -f2 )
	repo_dir=$( grep "^$1\t" $GIT_REPO_LIST | cut -f3 )
	giturl=$( grep "^$1\t" $GIT_REPO_LIST | cut -f4 )
	# unset variable of branch parameter if invalid
	[[ $branch_name = "" ]] && unset branch_name
	
	rc=0
	# case by number of arguments
	case $# in
		1)
			# set arguments to variables
			repo_name=$1
			
			# check number of repo record
			if [[ $l -eq 0 ]]; then
				echo "ERROR: repo name $repo_name not registered in $GIT_REPO_LIST"
				exit 255
			fi
			if [[ $l -ge 2 ]]; then
				echo "ERROR: many repo name $repo_name found in $GIT_REPO_LIST"
				exit 255
			fi
			
			# check repo parameters
			if [[ $repo_dir = "" ]]; then
				echo "ERROR: repo dir of $repo_name not registered in $GIT_REPO_LIST"
				exit 255
			fi
			if [[ ! $repo_dir =~ ${repo_name}$ ]]; then
				echo "ERROR: last repo dir MUST be equal to repo name $repo_name"
				exit 255
			fi
			if [[ $giturl = "" ]]; then
				echo "ERROR: gitURL of $repo_name not registered in $GIT_REPO_LIST"
				exit 255
			fi
			parent_dir=${repo_dir:0:-${#repo_name}-1}
			
			# perform clone
			type branch_name >/dev/null 2>&1 && \
				# clone with branch if variable branch_name found
				( cd $parent_dir; git clone $giturl -b $branch_name --depth 1 ) || \
				# clone without branch if variable branch_name not found
				( cd $parent_dir; git clone $giturl --depth 1 )
			rc=$?
			;;
		4)
			#
			# case of clone and register without branch
			#
			# set arguments to variables
			repo_name=$1
			branch_name=$2
			repo_dir=$3
			giturl=$4
	
			# check number of repo record
			if [[ $l -ne 0 ]]; then
				echo "ERROR: repo name $repo_name already registered in $GIT_REPO_LIST"
				exit 255
			fi
			# check repo parameters
			if [[ -d $repo_dir ]]; then
				echo "ERROR: repo dir $repo_dir already exists"
				exit 255
			fi
			if [[ ! $repo_dir =~ ${repo_name}$ ]]; then
				echo "ERROR: last repo dir MUST be equal to repo name $repo_name"
				exit 255
			fi
			parent_dir=${repo_dir:0:-${#repo_name}-1}
			
			
			# clone with branch
			(mkdir $parent_dir; cd $parent_dir; git clone $giturl -b $branch_name --depth 1)
			# register if git clone success
			rc=$?
			if [[ $rc -eq 0 ]]; then
				$work_name register $repo_name $branch_name $repo_dir $giturl
			fi
			;;
	esac
	
	exit $rc
}

function func_sub_return_completion_do_arg1() {
		[[ $1 = "key" ]] && echo "repo name"
		[[ $1 = "values" ]] && cat $GIT_REPO_LIST | grep -v '^#' | grep -v '^$' | cut -f1
}
function func_sub_return_completion_do_args2() {
		[[ $1 = "key" ]] && echo "branch name"
		sz_branch_names=( $( cat $GIT_REPO_LIST | grep $repo_name_candidate | cut -f1 ) )
		branch_names="$(IFS=' '; echo "${sz_branch_names[*]}")" 
		[[ $1 = "values" ]] && echo $branch_names
}
function func_sub_return_completion_do_args3() {
		# repo_dir
}
function func_sub_return_completion_do_args4() {
		[[ $1 = "key" ]] && echo "URL to git"
		[[ $1 = "values" ]] && echo "https://github.com/"
}
# concrete function to output this method description for indirect execution(called from completion _XXX_do script/function)
# ACTION: Update code
#
function func_sub_do_desc() {
	# here output description for this do method
	echo "clone(downlaod) repo from remote to local"
}
function func_sub_do_help() {
	echo "    arg[1]: repo name"
	echo "    arg[2]: branch name"
	echo "    arg[3]: local dir to the repository"
	echo "    arg[4]: URL to git"
}

#export_functions='func_sub_do func_sub_do_desc func_sub_do_help func_sub_return_completion_do_arg1 func_sub_return_completion_do_arg2 func_sub_return_completion_do_arg3 func_sub_return_completion_do_arg4 func_sub_return_completion_do_arg5 func_sub_return_completion_do_arg6 func_sub_return_completion_do_arg7 func_sub_return_completion_do_arg8 func_sub_return_completion_do_arg9'

export_functions='func_sub_do func_sub_do_desc func_sub_do_help func_sub_return_completion_do_arg1 func_sub_return_completion_do_arg2 func_sub_return_completion_do_arg3 func_sub_return_completion_do_arg4'
export -f $export_functions
. $( dirname $0 )/../.do/do.super $1 $2 $3 $4 $5 $6 $7 $8 $9
unset $export_functions

